var documenterSearchIndex = {"docs":
[{"location":"contributing/#Contributing-guidelines","page":"Contributing","title":"Contributing guidelines","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"First of all, thanks for the interest!","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"We welcome all kinds of contribution, including, but not limited to code, documentation, examples, configuration, issue creating, etc.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Be polite and respectful.","category":"page"},{"location":"contributing/#Bug-reports-and-discussions","page":"Contributing","title":"Bug reports and discussions","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If you think you found a bug, feel free to open an issue. Focused suggestions and requests can also be opened as issues. Before opening a pull request, start an issue or a discussion on the topic, please.","category":"page"},{"location":"contributing/#Working-on-an-issue","page":"Contributing","title":"Working on an issue","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If you found an issue that interests you, comment on that issue what your plans are. If the solution to the issue is clear, you can immediately create a pull request (see below). Otherwise, say what your proposed solution is and wait for a discussion around it.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"TipFeel free to ping us after a few days if there are no responses.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If your solution involves code (or something that requires running the package locally), check the developer documentation. Otherwise, you can use the GitHub interface directly to create your pull request.","category":"page"},{"location":"developer/#Developer-documentation","page":"Dev setup","title":"Developer documentation","text":"","category":"section"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"If you haven't, please read the Contributing guidelines first.","category":"page"},{"location":"developer/#Linting-and-formatting","page":"Dev setup","title":"Linting and formatting","text":"","category":"section"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"Install a plugin on your editor to use EditorConfig. This will ensure that your editor is configured with important formatting settings.","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"We use https://pre-commit.com to run the linters and formatters. In particular, the Julia code is formatted using JuliaFormatter.jl, so please install it globally first.","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"To install pre-commit, we recommend using pipx as follows:","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"# Install pipx following the link\npipx install pre-commit","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"With pre-commit installed, activate it as a pre-commit hook:","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"pre-commit install","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"To run the linting and formatting manually, enter the command below:","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"pre-commit run -a","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"Now, you can only commit if all the pre-commit tests pass.","category":"page"},{"location":"developer/#First-time-clone","page":"Dev setup","title":"First time clone","text":"","category":"section"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"If this is the first time you work with this repository, follow the instructions below to clone the repository.","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"Fork this repo\nClone your repo (this will create a git remote called origin)\nAdd this repo as a remote:\ngit remote add orgremote https://github.com/TulipaEnergy/TulipaIO.jl","category":"page"},{"location":"developer/#Working-on-a-new-issue","page":"Dev setup","title":"Working on a new issue","text":"","category":"section"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"Fetch from the JSO remote and fast-forward your local main\ngit fetch orgremote\ngit switch main\ngit merge --ff-only orgremote/main\nBranch from main to address the issue (see below for naming)\ngit switch -c 42-add-answer-universe\nPush the new local branch to your personal remote repository\ngit push -u origin 42-add-answer-universe\nCreate a pull request to merge your remote branch into the org main.","category":"page"},{"location":"developer/#Branch-naming","page":"Dev setup","title":"Branch naming","text":"","category":"section"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"If there is an associated issue, add the issue number.\nIf there is no associated issue, and the changes are small, add a prefix such as \"typo\", \"hotfix\", \"small-refactor\", according to the type of update.\nIf the changes are not small and there is no associated issue, then create the issue first, so we can properly discuss the changes.\nUse dash separated imperative wording related to the issue (e.g., 14-add-tests, 15-fix-model, 16-remove-obsolete-files).","category":"page"},{"location":"developer/#Commit-message","page":"Dev setup","title":"Commit message","text":"","category":"section"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"Use imperative or present tense, for instance: Add feature or Fix bug.\nHave informative titles.\nIf necessary, add a body with details.","category":"page"},{"location":"developer/#Before-creating-a-pull-request","page":"Dev setup","title":"Before creating a pull request","text":"","category":"section"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"[Advanced] Try to create \"atomic git commits\" (recommended reading: The Utopic Git History).\nMake sure the tests pass.\nMake sure the pre-commit tests pass.\nFetch any main updates from upstream and rebase your branch, if necessary:\nbash  git fetch orgremote  git rebase orgremote/main BRANCH_NAME\nThen you can open a pull request and work with the reviewer to address any issues.","category":"page"},{"location":"testing/#Notes-on-writing-tests","page":"Notes on writing tests","title":"Notes on writing tests","text":"","category":"section"},{"location":"testing/#Testing-for-exceptions-and-errors","page":"Notes on writing tests","title":"Testing for exceptions and errors","text":"","category":"section"},{"location":"testing/","page":"Notes on writing tests","title":"Notes on writing tests","text":"We should also test error handling, this is particularly important since TulipaIO is user-facing.  We follow two principles:","category":"page"},{"location":"testing/","page":"Notes on writing tests","title":"Notes on writing tests","text":"throw a relevant [Exception][1], if one doesn't exist, we can create one that emits a relevant message; see [exceptions.jl][2] and its uses in the codebase.\nto test an exception, we test both the exception type, and the generated message.  This is done with @test_throws.  While testing the type has been supported in Julia 1.6 (LTS), unfortunately testing the message has only been supported since [Julia 1.8][3], also the test has to be done by repeating the error.  So the guideline is to test exceptions like this example from test-pipeline.jl:\n@test_throws DimensionMismatch TIO.set_tbl_col(args...; opts...)\nif (VERSION.major >= 1) && (VERSION.minor >= 8)\n    @test_throws [r\"Length.+different\", r\"index.+value\"] TIO.set_tbl_col(args...; opts...)\nend","category":"page"},{"location":"testing/","page":"Notes on writing tests","title":"Notes on writing tests","text":"[1]: https://docs.julialang.org/en/v1/manual/control-flow/#Exception-Handling [2]: https://github.com/TulipaEnergy/TulipaIO.jl/blob/main/src/exceptions.jl [3]: https://docs.julialang.org/en/v1/stdlib/Test/#Test.@test_throws","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [TulipaIO]","category":"page"},{"location":"reference/#Base.merge-Tuple","page":"Reference","title":"Base.merge","text":"merge(args...)\n\nGiven a set of structs, merge them and return a single struct.  Fields are merged when they are equal or nothing.  Anything else raises an error with a summary of the fields with conflicting values.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaIO.create_tbl-Tuple{DuckDB.DB, String, String}","page":"Reference","title":"TulipaIO.create_tbl","text":"create_tbl(\n    con::DB,\n    base_source::String,\n    alt_source::String;\n    on::Vector{Symbol},\n    cols::Vector{Symbol},\n    variant::String = \"\",\n    fill::Union{Bool,Vector::Any} = true,\n    tmp::Bool = false,\n    show::Bool = false,\n)\n\nCreate a table from two sources.  The first is used as the base, and the second source is used as a source for alternative values by doing a LEFT JOIN, i.e. all rows in the base source are retained.\n\nEither sources can be a table in DuckDB, or a file source as in the single source variant.\n\nThe resulting table is saved as the table variant.  The name of the created table is returned.  The behaviour for tmp, and show are identical to the single source variant.\n\nThe LEFT JOIN is performend on the columns specified by on.  The set of columns picked from the alternative source after the join are specified by cols.\n\nIf the alternate source has a subset of rows, the default behaviour is to back-fill the corresponding values from the base table.  If this is not desired, then fill can be set to false.  In that case they will be missing values.\n\nIt is also possible to set the fill value to a specific value, however then you have to specify a value for every column that is included from the alternative source.  (TODO: remove this restriction)\n\nTODO: In the future an \"error\" option would also be supported, to fail loudly when the number of rows do not match between the base and alternative source.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaIO.create_tbl-Tuple{DuckDB.DB, String}","page":"Reference","title":"TulipaIO.create_tbl","text":"create_tbl(\n    con::DB,\n    source::String;\n    name::String = \"\",\n    tmp::Bool = false,\n    show::Bool = false,\n)\n\nCreate a table from a file source (CSV, Parquet, line delimited JSON, etc)\n\nThe resulting table is saved as the table name.  The name of the created table is returned.\n\nOptionally, if show is true, the table is returned as a Julia DataFrame.  This can be useful for interactive debugging in the Julia REPL.\n\nIt is also possible to create the table as a temporary table by setting the tmp flag, i.e. the table is session scoped.  It is deleted when you close the connection with DuckDB.\n\nWhen show is false, and name was not provided, a table name autotomatically generated from the basename of the filename is used. This also unconditionally sets the temporary table flag to true.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaIO.flow_from_json-Tuple{Any}","page":"Reference","title":"TulipaIO.flow_from_json","text":"flow_from_json(json)\n\nReturns an array of from/to node names from a JSON document (as parsed by JSON3.jl):\n\n[(from_name, to_name, Asset(...)), (..., ..., ...), ...]\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaIO.flow_from_json_impl!-Tuple{JSON3.Object, Any}","page":"Reference","title":"TulipaIO.flow_from_json_impl!","text":"flow_from_json_impl!(json, flows; find_edge)\n\nFind all flows (from/to node names) from a JSON document.\n\njson: JSON document\nflows: The flows are returned by appending to this vector\nfind_edge: Function invoked as find_edge(asset::JSON3.Object) to find the flows originating from an asset\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaIO.json_get-Tuple{Any, String}","page":"Reference","title":"TulipaIO.json_get","text":"json_get(json, reference; trunc = 0)\n\nGiven a JSON document, find the object pointed to by the reference (e.g. \"//@<key>.<array_idx>/@<key>\"); truncate the last trunc components of the reference.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaIO.read_esdl_json-Tuple{Any}","page":"Reference","title":"TulipaIO.read_esdl_json","text":"read_esdl_json(json_path)\n\nThis is the entry point for the parser.  It reads the ESDL JSON file at json_path and returns an array of from/to node names, along with a struct of Asset type.  The Asset attribute values are determined by combining the attribute values of the from & to ESDL assets nodes.  If the two nodes have conflicting asset values, an error is raised:\n\n[(from_name, to_name, Asset(...)), (..., ..., ...), ...]\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaIO.reduce_unless-Tuple{Any, Any}","page":"Reference","title":"TulipaIO.reduce_unless","text":"reduce_unless(fn, itr; init, sentinel)\n\nA version of reduce that stops if reduction returns sentinel at any point\n\nfn: reduction function\nitr: iterator to reduce\ninit: initial value (unlike standard, mandatory)\nsentinel: stop if reduction returns sentinel\n\nReturns reduced value, or sentinel\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaIO.resolve!-Tuple{Any, Any, Any}","page":"Reference","title":"TulipaIO.resolve!","text":"resolve!(field, values, errs)\n\nGiven a set of values, ensure they are either all equal or nothing.  On failure, push field to errs.\n\nfield: the field to push in errs to signal failure\nvalues: values to check\nerrs: vector of field names with errors\n\nReturns resolved value\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaIO.set_tbl_col-Union{Tuple{T}, Tuple{DuckDB.DB, String, Dict{Symbol, T}}} where T","page":"Reference","title":"TulipaIO.set_tbl_col","text":"set_tbl_col(\n    con::DB,\n    source::String,\n    cols::Dict{Symbol, T};\n    on::Symbol,\n    col::Symbol,\n    where_::String = \"\",\n    variant::String = \"\",\n    tmp::Bool = false,\n    show::Bool = false,\n) where T\n\nCreate a table from a source (either a DuckDB table or a file), where a column can be set to the value provided by value.  Unlike the vector variant of this function, all values of the column are set to this value.\n\nAll other options and behaviour are same as the vector variant of this function.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaIO.set_tbl_col-Union{Tuple{T}, Tuple{DuckDB.DB, String, Dict{Symbol, Vector{T}}}} where T<:Union{Bool, Float64, Int64, String}","page":"Reference","title":"TulipaIO.set_tbl_col","text":"set_tbl_col(\n    con::DB,\n    source::String,\n    cols::Dict{Symbol,Vector{T}};\n    on::Symbol,\n    variant::String = \"\",\n    tmp::Bool = false,\n    show::Bool = false,\n) where T <: Union{Int64, Float64, String, Bool}\n\nCreate a table from a source (either a DuckDB table or a file), where a column can be set to the vector provided by vals.  This transform is very similar to create_tbl, except that the alternate source is a data structure in Julia.\n\nThe resulting table is saved as the table name.  The name of the created table is returned.\n\nAll other options behave as the two source version of create_tbl.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = TulipaIO","category":"page"},{"location":"#TulipaIO","page":"Home","title":"TulipaIO","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TulipaIO.","category":"page"}]
}
